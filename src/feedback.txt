============================================
vis/result.rtx
20:24:29_Wednesday_23_May_2018
============================================
Feedback:
	Your program ("Nimsys.java") has been submitted successfully.
	Compiling your program with "javac"...
	Your program has been result.rtxd successfully :-)
Now, it's your responsibility to test your program for correctness!
Here is a simple test case, and the results:
============================================
Test for input file: in1
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$
$									$
$									$
$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

1 stones left: *							1 stones left: *
George's turn - remove how many?					George's turn - remove how many?

Game Over								Game Over
John Adams wins!							John Adams wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: John Adams							Player 1: John Adams
Player 2: Thomas Jefferson						Player 2: Thomas Jefferson

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
Thomas Jefferson wins!							Thomas Jefferson wins!

$									$
Initial stone count: 1							Initial stone count: 1
Maximum stone removal: 1						Maximum stone removal: 1
Player 1: Thomas Jefferson						Player 1: Thomas Jefferson
Player 2: James Madison							Player 2: James Madison

1 stones left: *							1 stones left: *
Thomas's turn - remove how many?					Thomas's turn - remove how many?

Game Over								Game Over
James Madison wins!							James Madison wins!

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams						67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson					50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in2
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$george,George,Washington,2 games,0 wins				$george,George,Washington,2 games,0 wins
jadams,John,Adams,3 games,2 wins					jadams,John,Adams,3 games,2 wins
jmadison,James,Madison,1 games,1 wins					jmadison,James,Madison,1 games,1 wins
tom,Thomas,Jefferson,2 games,1 wins					tom,Thomas,Jefferson,2 games,1 wins

$100% | 01 games | James Madison					$100% | 01 games | James Madison
67%  | 03 games | John Adams						67%  | 03 games | John Adams
50%  | 02 games | Thomas Jefferson					50%  | 02 games | Thomas Jefferson
0%   | 02 games | George Washington					0%   | 02 games | George Washington

$									$

Your results seem to be CORRECT :-).
============================================
Test for input file: in3
Expected results:							Your results:
Welcome to Nim								Welcome to Nim

$'createplayer' is not a valid command.					$'createplayer' is not a valid command.

$Incorrect number of arguments supplied to command.			$Incorrect number of arguments supplied to command.

$									$
$									$

Your results seem to be CORRECT :-).
============================================
src/InvalidNumOfArgsException.java
20:24:03_Wednesday_23_May_2018
============================================


/**
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 * @version 3.8
 * @description This is the third project for COMP90041
 * 
 * This class in prepared for missing arguments 
 * 
 */


public class InvalidNumOfArgsException extends Exception{
	public InvalidNumOfArgsException(){
		super("Bad number of arguments");
	}
	public InvalidNumOfArgsException(String message){
		super();
	}

}
============================================
src/InvalidMoveException.java
20:24:03_Wednesday_23_May_2018
============================================



/**
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 * @version 3.8
 * @description This is the third project for COMP90041
 * 
 * This class in prepared for invalid move exception
 * 
 */
public class InvalidMoveException extends Exception{
	private int stones;
	public InvalidMoveException(){
		super("Invalid Move");
	}
	public InvalidMoveException(int message){
		super("Invalid Move");
		stones = message;
	}
	public int getStones(){
		return stones;
	}
	
}
============================================
src/Nimsys.java
20:24:05_Wednesday_23_May_2018
============================================










import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.InvalidPropertiesFormatException;
import java.util.Scanner;

import javax.naming.directory.InvalidSearchFilterException;

/**
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 * @version 3.8
 * @description This is the third project for COMP90041
 * Main method in this class
 * This class contains lots of methods in order to run the program
 * 
 */

public class Nimsys {
	private final int IN_GAME = 0;
	private final int IDLE = -1;
	private final int FIRST_POSITION = 0;
	private final int SECOND_POSITION = 1;
	private final int THIRD_POSITION = 2;
	private final int FOURTH_POSITION = 3;
	private final int FIVTH_POSITION = 4;
	private final int SIXTH_POSITION = 5;
	private final int MAX_PLAYER = 100;
	private final int Length_OF_ARRAY = 2;
	private final int MAX_OUTPUT_PLAYERS = 10;
	private final int HUMAN_LENGTH = 6;

	public static Scanner Keyboard = new Scanner(System.in);// The only static variable
	

	public int checkIndex(String[] command, NimPlayer[] ply) {
		int index = 0;
		for (int i = 0; i < ply.length; i++) {
			if (ply[i] != null) {
				if (command[SECOND_POSITION].equals(ply[i].getUsername())) {
					index = i;
					break;
				}
			}
		}
		return index;
	}

	public int[] checkTwoIndex(String[] command, NimPlayer[] ply) {
		// This method return the position of the player in array
		int[] indexForPlayers = new int[Length_OF_ARRAY];
		for (int i = 0; i < ply.length; i++) {
			if (ply[i] != null) {
				if (command[FOURTH_POSITION].equals(ply[i].getUsername())) {
					indexForPlayers[FIRST_POSITION] = i;
				}
				if (command[FIVTH_POSITION].equals(ply[i].getUsername())) {
					indexForPlayers[SECOND_POSITION] = i;
				}
			}
		}
		return indexForPlayers;
	}

	public boolean checkArr(String[] command, NimPlayer[] ply) {
		// This method check if the player exists
		for (int i = 0; i < ply.length; i++) {
			if (ply[i] != null & command[SECOND_POSITION] != null) {
				if (command[SECOND_POSITION].equals(ply[i].getUsername())) {
					return false;
				}
			}
		}
		return true;
	}

	public boolean checkTwoUsers(String[] command, NimPlayer[] ply) {
		// This method check if both player in the array
		int count = 0;
		for (int i = 0; i < ply.length; i++) {
			if (ply[i] != null) {
				if (command[FOURTH_POSITION].equals(ply[i].getUsername())) {
					count += 1;
				}
				if (command[FIVTH_POSITION].equals(ply[i].getUsername())) {
					count += 1;
				}
				if (count == 2) {
					return false;
				}
			}
		}
		return true;
	}

	public NimPlayer[] rankingList(NimPlayer[] playerData,boolean order) {
		// This method returns the sorted player list by winning ratio(alphabet
		// if tie)
		NimPlayer[] plyRanking = new NimPlayer[playerData.length];
		int index = 0;
		for (int i = 0; i < playerData.length; i++) {
			if (playerData[i] == null) {
				continue;
			}
			if (playerData[i].numOfGamePlayed != 0) {
				playerData[i].winningRatio = 
					(double) playerData[i].numOfGameWon / playerData[i].numOfGamePlayed;
				plyRanking[i] = playerData[i];
				index = i + 1;
			}
			if (playerData[i].numOfGamePlayed == 0) {
				playerData[i].winningRatio = 0;
				plyRanking[i] = playerData[i];
				index = i + 1;
			}
		}

		NimPlayer[] newPlyRanking = new NimPlayer[index];

		System.arraycopy(plyRanking, 0, newPlyRanking, 0, index);
		// copy the sorted array into the new array without null
		if(order){
		Arrays.sort(newPlyRanking);// override compareTo method in NimPlayer class
		}else{
			Arrays.sort(newPlyRanking,new NimHumanPlayer());//compare method
		}
		return newPlyRanking;
	}

	public void addPlayer(Nimsys system, String[] command, NimPlayer[] playerData, boolean AI) {
		if (system.checkArr(command, playerData)) {
			for (int i = 0; i < playerData.length; i++) {
				if (playerData[i] == null) {
					if(!AI){
						playerData[i] = new NimHumanPlayer();
					}else{
						playerData[i] = new NimAIPlayer();
					}
					
					playerData[i].setUsername(command[SECOND_POSITION]);
					playerData[i].setGivenName(command[FOURTH_POSITION]);
					playerData[i].setFamilyName(command[THIRD_POSITION]);
					break;
				}
			}
		} else {
			System.out.println("The player already exists.");
		}
	}

	public void removePlayer(Nimsys system, String[] command, NimPlayer[] playerData) {
		if (command.length < Length_OF_ARRAY) {
			System.out.println("Are you sure you want to remove all players? (y/n)");
			String removeAll = Keyboard.nextLine();
			if (removeAll.equals("y") || removeAll.equals("Y")) {
				for (int i = 0; i < playerData.length; i++) {
					playerData[i] = null;
				}
			}
			// continue;
		} else if (!system.checkArr(command, playerData)) {
			playerData[system.checkIndex(command, playerData)] = null;
		} else {
			System.out.println("The player does not exist.");
		}
	}

	public void editPlayer(Nimsys system, String[] command, NimPlayer[] playerData) {
		if (!system.checkArr(command, playerData)) {
			int playerNum = system.checkIndex(command, playerData);
			playerData[playerNum].setGivenName(command[FOURTH_POSITION]);
			
			playerData[playerNum].setFamilyName(command[THIRD_POSITION]);
		} else {
			System.out.println("The player does not exist.");
		}

	}

	public void displayPlayer(Nimsys system, String[] command, NimPlayer[] playerData) {
		String[] usernameOrder = new String[playerData.length];
		// put all the usernames into a new array
		int index = 0;
		for (int i = 0; i < playerData.length; i++) {
			if (playerData[i] != null) {
				usernameOrder[i] = playerData[i].getUsername();
				index = i + 1;
			}

		}
		String[] newUsernameOrder = new String[index];

		System.arraycopy(usernameOrder, 0, newUsernameOrder, 0, index);// eliminate all the null

		Arrays.sort(newUsernameOrder);

		NimPlayer storedHumanPlayer = new NimHumanPlayer();
		NimPlayer storedAIPlayer = new NimAIPlayer();
		// creating a instance of NimPlayer to store the value
		for (int i = 0; i < newUsernameOrder.length; i++) {
			// re-assign the positions of playerData by it's username's positions
			for (int j = 0; j < playerData.length; j++) {
				if (playerData[j] != null) {
					if (newUsernameOrder[i].equals(playerData[j].getUsername())) {
						if(playerData[j] instanceof NimHumanPlayer){
							storedHumanPlayer = playerData[i];
						playerData[i] = playerData[j];
						playerData[j] = storedHumanPlayer;
						}else{
							storedAIPlayer = playerData[i];
							playerData[i] = playerData[j];
							playerData[j] = storedAIPlayer;
						}
						
					}
				}
			}
		}

		if (command.length < Length_OF_ARRAY) {
			for (int i = 0; i < playerData.length; i++) {
				if (playerData[i] != null) {
					System.out.println(playerData[i].getUsername() + "," + playerData[i].getGivenName() + ","
							+ playerData[i].getFamilyName() + "," + playerData[i].numOfGamePlayed + " games" + ","
							+ playerData[i].numOfGameWon + " wins");
				}
			}
			// continue;
		} else if (!system.checkArr(command, playerData) && command[SECOND_POSITION] != null) {
			int playerNum = system.checkIndex(command, playerData);
			System.out.println(playerData[playerNum].getUsername() + ","
					+ playerData[playerNum].getGivenName() + ","
					+ playerData[playerNum].getFamilyName() + ","
					+ playerData[playerNum].numOfGamePlayed + " games" + ","
					+ playerData[playerNum].numOfGameWon + " wins");
		} else {
			System.out.println("The player does not exist.");
		}
	}

	public void resetStats(Nimsys system, String[] command, NimPlayer[] playerData) {
		if (command.length < Length_OF_ARRAY) {
			System.out.println("Are you sure you want to reset all player statistics? (y/n)");
			String resetAll = Keyboard.nextLine();
			//System.out.println("command " + resetAll);
			if (resetAll.equals("y") || resetAll.equals("Y")) {

				for (int i = 0; i < playerData.length; i++) {

					if (playerData[i] != null) {
						playerData[i].numOfGamePlayed = 0;
						playerData[i].numOfGameWon = 0;
					}
				}
			}
			//System.out.println();
			// continue;
		} else if (!system.checkArr(command, playerData)) {
			playerData[system.checkIndex(command, playerData)].numOfGamePlayed = 0;
			playerData[system.checkIndex(command, playerData)].numOfGameWon = 0;
		} else {
			System.out.println("The player does not exist.");
		}
	}
	public void descOutput(NimPlayer[] playerData){
		if(playerData.length<=MAX_OUTPUT_PLAYERS){
			for (int i = 0; i < playerData.length; i++) {
				if (playerData[i] != null) {
					System.out.println(playerData[i]);
				}
			}
			// continue;
		}		else{
						for (int i = 0; i < 10; i++) {
								if (playerData[i] != null) {
									System.out.println(playerData[i]);
				}
			}
		}
	}

	public void rankings(Nimsys system, String[] command, NimPlayer[] playerData) {
		boolean order = true;
		playerData = system.rankingList(playerData,order);// getting the sorted rankinglist
		if (command.length < Length_OF_ARRAY) {
			descOutput(playerData);
			
		} else if (command[SECOND_POSITION].equals("desc")) {
			descOutput(playerData);
		} else if (command[SECOND_POSITION].equals("asc")) {
			order = false;
			playerData = system.rankingList(playerData,order);
			descOutput(playerData);
			
		}
		
	}
	public void writeFile(NimPlayer[] playerData){
		//This method write player data into file players.dat
		try {
			PrintWriter outputStreamName = new PrintWriter(new FileOutputStream("players.dat"));
			for (int i = 0; i < playerData.length; i++) {
				if(playerData[i]!=null){
					
					boolean test4Human = playerData[i] instanceof NimHumanPlayer;
					boolean test4AI = playerData[i] instanceof NimAIPlayer;
					//System.out.println("test4 "+test4);
					//System.out.println("test5 "+test5);
					if(test4AI){
						 
						String line =  (playerData[i].getUsername()+","+playerData[i].getGivenName()
								+","+playerData[i].getFamilyName()+","+playerData[i].getNumOfGamePlayed()+","
								+playerData[i].getNumOfGameWon()+","+playerData[i].getWinningRatio()+","
								+((NimAIPlayer)playerData[i]).isAIPlayer());
					outputStreamName.print(line+"\r\n");
					}else if (test4Human){//can be extra to a method
						
						String line = playerData[i].getUsername()+","
						+playerData[i].getGivenName()+","+playerData[i].getFamilyName()+","
						+playerData[i].getNumOfGamePlayed()+","+playerData[i].getNumOfGameWon()+","
						+playerData[i].getWinningRatio();
				outputStreamName.print(line+"\r\n");}
				
				
				
			}}
			outputStreamName.flush();
			outputStreamName.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public NimPlayer[] fileReader(NimPlayer[] playerData){
		//This method read file players.dat
		try {
			File file = new File("."+File.separator+"players.dat");
			//in order to store in same directory
			if(!file.exists()){
				file.createNewFile();
				//System.out.println("done written file");
			}else{
			BufferedReader inputStream = new BufferedReader(new FileReader("players.dat"));
			String line = null;
			
			
			int count = 0;
			while((line =inputStream.readLine())!=null){
				
				
				String regex = "[^a-zA-Z_0-9.]";
				
				String[] info = line.split(regex);
				
				if(info.length==HUMAN_LENGTH){
					playerData[count] = new NimHumanPlayer();
					playerData[count].setUsername(info[FIRST_POSITION]);
					
					playerData[count].setGivenName(info[SECOND_POSITION]);
					playerData[count].setFamilyName(info[THIRD_POSITION]);
					playerData[count].setNumOfGamePlayed(Integer.parseInt(info[FOURTH_POSITION]));
					playerData[count].setNumOfGameWon(Integer.parseInt(info[FIVTH_POSITION]));
					playerData[count].setWinningRatio(Double.parseDouble(info[SIXTH_POSITION]));}
				else{
					playerData[count] = new NimAIPlayer();
					playerData[count].setUsername(info[FIRST_POSITION]);
					
					playerData[count].setGivenName(info[SECOND_POSITION]);
					playerData[count].setFamilyName(info[THIRD_POSITION]);
					playerData[count].setNumOfGamePlayed(Integer.parseInt(info[FOURTH_POSITION]));
					playerData[count].setNumOfGameWon(Integer.parseInt(info[FIVTH_POSITION]));
					playerData[count].setWinningRatio(Double.parseDouble(info[SIXTH_POSITION]));
				}
					count += 1;
				//System.out.println("test"+playerData.length);	
				//}
			}
			//System.out.println("done");
			inputStream.close();
			}
		} catch (FileNotFoundException e) {
			System.out.println("File players.dat was not found");
		} catch(IOException e){
			System.out.println("Error reading from players.dat");
		}
		return playerData;
	}

	public void systemCommand(NimGame game, Nimsys system, NimPlayer[] playerData) {
		
			
		playerData = fileReader(playerData);
		//System.out.println(playerData[0].getFamilyName());
		System.out.println("Welcome to Nim");
		int state = IDLE;
		while (state != IN_GAME) {
			try {System.out.println();
			System.out.print("$");
			String commandInput = Keyboard.nextLine();

			String regex = "[^a-zA-Z_0-9]";
			String[] command = commandInput.split(regex);

			if (command[FIRST_POSITION].equals("addplayer")) {
				// switch may not work on server so using if-else if-else here
				boolean AI = false;
				if(command.length<4){
					throw new InvalidNumOfArgsException();
				}

				addPlayer(system, command, playerData,AI);

			} else if (command[FIRST_POSITION].equals("addaiplayer")) {
				// switch may not work on server so using if-else if-else here
				boolean AI = true;
				if(command.length<4){
					throw new InvalidNumOfArgsException();
				}

				addPlayer(system, command, playerData,AI);

			}
			else if (command[FIRST_POSITION].equals("removeplayer")) {
				removePlayer(system, command, playerData);

			} else if (command[FIRST_POSITION].equals("editplayer")) {
				if(command.length<4){
					throw new InvalidNumOfArgsException();
				}
				editPlayer(system, command, playerData);

			} else if (command[FIRST_POSITION].equals("resetstats")) {
				resetStats(system, command, playerData);
			} else if (command[FIRST_POSITION].equals("displayplayer")) {
				displayPlayer(system, command, playerData);

			} else if (command[FIRST_POSITION].equals("rankings")) {
				rankings(system, command, playerData);

			} else if (command[FIRST_POSITION].equals("startgame")) {
				if(command.length<5){
					throw new InvalidNumOfArgsException();
				}
				if (!system.checkTwoUsers(command, playerData)) {
					int[] indexForPlayers = system.checkTwoIndex(command, playerData);
					//store the specified players into an array (indexForPlayers)
					System.out.println();
					System.out.println("Initial stone count: " + command[SECOND_POSITION]);
					
					game.numberOfStone = Integer.parseInt(command[SECOND_POSITION]);
					System.out.println("Maximum stone removal: " + command[THIRD_POSITION]);
					
					game.upperBound = Integer.parseInt(command[THIRD_POSITION]);
					
					System.out.println("Player 1: " 
					+ playerData[indexForPlayers[FIRST_POSITION]].getGivenName() 
					+ " "+ playerData[indexForPlayers[FIRST_POSITION]].getFamilyName());
					
					System.out.println("Player 2: " 
					+playerData[indexForPlayers[SECOND_POSITION]].getGivenName()
					+ " "+ playerData[indexForPlayers[SECOND_POSITION]].getFamilyName());

					game.gameStart(playerData[indexForPlayers[FIRST_POSITION]],
							playerData[indexForPlayers[SECOND_POSITION]], game);
					//use user-specified players to initiate game
				} else {
					System.out.println("One of the players does not exist.");
				}
			} else if (command[FIRST_POSITION].equals("exit")) {
				//System.out.println(playerData[0]);
				writeFile(playerData);
				System.out.println();
				System.exit(0);
				state = IN_GAME;
			}else{
			throw new InvalidCommandException(command[FIRST_POSITION]);}
		}catch (InvalidCommandException e) {
			String msg = e.getMessage();
			System.out.println("'"+msg+"'"+" is not a valid command.");
		
		}catch(InvalidNumOfArgsException e){
			String msg = e.getMessage();
			System.out.println("Incorrect number of arguments supplied to command.");
			}
		}

	}

	public static void main(String[] args) {
		NimGame game = new NimGame();// creating an instance of the game
		Nimsys system = new Nimsys();
		NimPlayer[] playerData = new NimPlayer[system.MAX_PLAYER];
		system.systemCommand(game, system, playerData);
	}

}
============================================
src/NimAIPlayer.java
20:24:04_Wednesday_23_May_2018
============================================
import java.util.Random;

/*
NimAIPlayer.java

This class is provided as a skeleton code for the tasks of 
Sections 2.4, 2.5 and 2.6 in Project C. Add code (do NOT delete any) to it
to finish the tasks. 
*/
/**
 * 
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 *@version 3.8
 *@description this is the third project for COMP90041
 * This  class stores all the data for AI player
 * Method removeStone is strategy for AI to win under certain conditions
 */
public class NimAIPlayer extends NimPlayer implements Testable {//toString later
	public String AIPlayer = "AI";
// you may further extend a class or implement an interface
// to accomplish the tasks.	

public NimAIPlayer() {
	super();
			
}
public NimAIPlayer(String AIPlayer){
	super();
	this.AIPlayer= AIPlayer;
}

public String isAIPlayer() {
	return AIPlayer;
}
public void setAIPlayer(String aIPlayer) {
	AIPlayer = aIPlayer;
}


public NimAIPlayer( String username, String givenName, String familyName,
		int numOfGamePlayed, int numOfGameWon, double winningRatio) {
	super();
	
	this.username = username;
	this.givenName = givenName;
	this.familyName = familyName;
	this.numOfGamePlayed = numOfGamePlayed;
	this.numOfGameWon = numOfGameWon;
	this.winningRatio = winningRatio;
}

public String advancedMove(boolean[] available, String lastMove) {
	// the implementation of the victory
	// guaranteed strategy designed by you
	String move = "";
	
	return move;
}

@Override
public int removeStone(){
	return 0;
}
public int removeStone(int maxRemoval,int numberOfLeftStone,boolean firstMove) {
	//overloading in order to use this method by different parameters
	int result = (numberOfLeftStone-1)%(maxRemoval+1);
	//System.out.println("result"+result);
	int numberOfRemoval;
	//int testNumOfRemoval = -1;
	Random num = new Random();
	if((result!=0&&firstMove)){
		//testNumOfRemoval = result;
		numberOfRemoval = result;
	}
	
	else if(!firstMove){
		if(result!=0){
			//testNumOfRemoval = result;
			numberOfRemoval = result;
		}else{
			
			numberOfRemoval = num.nextInt(maxRemoval)+1;
			//System.out.println("random result");
		}
	}
	else{
		//Random num = new Random();
		numberOfRemoval = num.nextInt(maxRemoval)+1;
		//System.out.println("random result");
	}
	 
	
	return numberOfRemoval;
}
}============================================
src/NimGame.java
20:24:04_Wednesday_23_May_2018
============================================
import java.util.InputMismatchException;

/**
 * 
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 *@version 2.8
 *@description this is the third project for COMP90041
 * This class controls how the game operated
 */


public class NimGame {
	private int count; // count turns in order to determine who will be the winner
	public int numberOfStone;// total number of the stones
	public int upperBound;

	private void playerTurn(int numberOfStone, StringBuilder asterisks, int count, NimPlayer ply, int Keyboard,
			NimGame game,boolean firstMove) {

		if (numberOfStone > 0) {
			

			int numOfRemoval = 0;
			if(ply instanceof NimHumanPlayer){
				
				numOfRemoval = ((NimHumanPlayer)ply).removeStone(Keyboard);
			}if(ply instanceof NimAIPlayer){
				numOfRemoval = ((NimAIPlayer)ply).removeStone(game.upperBound,numberOfStone,firstMove);
			}

			numberOfStone -= numOfRemoval;

			asterisks.delete(0, numOfRemoval * 2);
			count++;
			game.numberOfStone = numberOfStone;
			game.count = count;

			if (numberOfStone > 0) {// in case there is an extra line when
									// stones <=0
				System.out.println(numberOfStone + " stones left:" + asterisks);
			}
		}

	}
	private int checkHumanInputInvalid(NimPlayer ply,StringBuilder asterisks){
		boolean correct = false;
		int removal = 0;
		
			removal = Nimsys.Keyboard.nextInt();
			correct = checkCorrectInput(removal);
			while (!correct) {
				System.out.println(numberOfStone + " stones left:" + asterisks);
				System.out.println(ply.getGivenName() + "'s turn - remove how many?");
				System.out.println();
				try {
					removal = Nimsys.Keyboard.nextInt();
				correct = checkCorrectInput(removal);
				} catch (InputMismatchException e) {
					e.printStackTrace();// TODO: handle exception
				}
				
			}
		return removal;
	}

	private boolean checkCorrectInput(int removal) {
		// This method considers all the incorrect inputs which has 6 possible
		//String invalidSyntaxBound = "Invalid move. You must remove between 1 and " + upperBound + " stones.";
		//String invalidSyntaxLeftStones = "Invalid move. You must remove between 1 and " + numberOfStone + " stones.";
		while (removal > upperBound || removal > numberOfStone || removal == 0) {
			//System.out.println();
			try{
			if (removal == 0 && upperBound > numberOfStone) {
				throw new InvalidMoveException(numberOfStone);
				
			} else if ((removal == 0 && upperBound < numberOfStone) || removal == 0) {
				
				throw new InvalidMoveException(upperBound);
			} else if (removal > upperBound && upperBound > numberOfStone) {
				throw new InvalidMoveException(numberOfStone);
				
			} else if (removal > upperBound && upperBound < numberOfStone) {
				
				throw new InvalidMoveException(upperBound);
			} else if (removal >= numberOfStone && upperBound <= numberOfStone) {
				
				throw new InvalidMoveException(upperBound);
			} else if (removal >= numberOfStone && upperBound >= numberOfStone) {
				throw new InvalidMoveException(numberOfStone);
				
			}}
			catch(InvalidMoveException e){
				int msg = e.getStones();
				System.out.println("Invalid move. You must remove between 1 and "
						+ msg + " stones.");
				System.out.println();
				return false;
			}
			// System.out.println();
			// removal = Nimsys.Keyboard.nextInt();
		}
		return true;
	}

	public void gameStart(NimPlayer ply1, NimPlayer ply2, NimGame game) {
		
		System.out.println();

		StringBuilder asterisks = new StringBuilder();
		for (int i = 0; i < numberOfStone; i++) {
			asterisks.append(" " + "*");
		}

		System.out.println(numberOfStone + " stones left:" + asterisks);

		while (numberOfStone > 0) {// This loop is used for repeating player's
									// turns

			int removal = 0;
			//boolean correct = false;
			boolean firstMove = true;
			System.out.println(ply1.getGivenName() + "'s turn - remove how many?");
			System.out.println();
			if(ply1 instanceof NimHumanPlayer){
			removal = checkHumanInputInvalid(ply1,asterisks);}
			
			

			playerTurn(numberOfStone, asterisks, count, ply1, removal, game,firstMove);

			if (numberOfStone > 0) {

				System.out.println(ply2.getGivenName() + "'s turn - remove how many?");
				firstMove = false;
				System.out.println();
				if(ply2 instanceof NimHumanPlayer){
				removal = checkHumanInputInvalid(ply2,asterisks);}
				
				
				playerTurn(numberOfStone, asterisks, count, ply2, removal, game,firstMove);
				// System.out.println("Second count " + count);
			}

		}
		if (numberOfStone <= 0) {
			System.out.println("Game Over");
			String deleteExtraLine = Nimsys.Keyboard.nextLine();// To eliminate
																// extra $ which
																// created by
																// removal
			ply1.numOfGamePlayed += 1;
			ply2.numOfGamePlayed += 1;

			if (count % 2 == 0) {// odd number is player1's turn vice-versa

				System.out.println(ply1.getGivenName() + " " + ply1.getFamilyName() + " wins!");
				ply1.numOfGameWon += 1;
			} else {
				System.out.println(ply2.getGivenName() + " " + ply2.getFamilyName() + " wins!");
				ply2.numOfGameWon += 1;
			}

			count = 0;// reset count every game
		}

	}
}
============================================
src/InvalidCommandException.java
20:24:02_Wednesday_23_May_2018
============================================

/**
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 * @version 3.8
 * @description This is the third project for COMP90041
 * 
 * This class in prepared for invalid command exception
 * 
 */

public class InvalidCommandException extends Exception{
	public InvalidCommandException(String message){
		super(message);
	}
	public InvalidCommandException(){
		super("Invalid Command");
	}

}
============================================
src/NimPlayer.java
20:24:05_Wednesday_23_May_2018
============================================



import java.util.Comparator;

/**
 * 
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 *@version 3.8
 *@description this is the third project for COMP90041
 * This abstract class prepare for Human player and AI player
 */




public abstract class NimPlayer implements Comparable<NimPlayer>,Comparator<NimPlayer>{
	
	/*
	 * for security reason, username,givenname, and familyname should be private
	 */
	public String username;
	public String givenName;
	public String familyName;
	public int numOfGamePlayed=0;
	public int numOfGameWon=0;
	public double winningRatio;
	
	public abstract int removeStone();

	@Override
	public int compareTo(NimPlayer o) {
		//override compareTo to determine 
		//	the sequence of the object array by it's winning ratio(username if tie)
		
		double i = winningRatio -o.winningRatio;
		if(i>0){
			return -1;
		}if(i<0){
			return 1;
		}else{
		return this.username.compareTo(o.username);}
	}
	@Override
	public int compare(NimPlayer o1, NimPlayer o2) {
		double i = o1.winningRatio-o2.winningRatio;
		if(i>0){
			return 1;
		}if(i<0){
			return -1;
		}else{
		return o1.username.compareTo(o2.username);}
	}
	public NimPlayer(){
		super();
	}
	public NimPlayer( String username, String givenName, String familyName,
			int numOfGamePlayed, int numOfGameWon, double winningRatio) {
		super();
		
		this.username = username;
		this.givenName = givenName;
		this.familyName = familyName;
		this.numOfGamePlayed = numOfGamePlayed;
		this.numOfGameWon = numOfGameWon;
		this.winningRatio = winningRatio;
	}

	@Override
	public String toString() {
		//In order to output the ranking by specific format, several if-else statements are used
		long winRate = Math.round((winningRatio*100));
		if(numOfGamePlayed<10){
				
			if(winRate==100){
			
			return winRate+"% "+"| "+"0"+numOfGamePlayed+" games"+" | "+ givenName+" "+familyName;
		}
		else if(winRate==0){
			return winRate+"%   "+"| "+"0"+numOfGamePlayed+" games"+" | "+ givenName+" "+familyName;
		}
		else{
		return winRate+"%  "+"| "+"0"+numOfGamePlayed+" games"+" | "+ givenName+" "+familyName;
		}	}
		else{
			if(winRate==100){
				
				return winRate+"% "+"| "+numOfGamePlayed+" games"+" | "+ givenName+" "+familyName;
			}
			else if(winRate==0){
				return winRate+"%   "+"| "+numOfGamePlayed+" games"+" | "+ givenName+" "+familyName;
			}
			else{
			return winRate+"%  "+"| "+numOfGamePlayed+" games"+" | "+ givenName+" "+familyName;
			}
		}
	}

	public double getWinningRatio() {
		return winningRatio;
	}

	public void setWinningRatio(double winningRatio) {
		this.winningRatio = winningRatio;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getGivenName() {
		return givenName;
	}

	public void setGivenName(String givenName) {
		this.givenName = givenName;
	}

	public String getFamilyName() {
		return familyName;
	}

	public void setFamilyName(String familyName) {
		this.familyName = familyName;
	}

	public int getNumOfGamePlayed() {
		return numOfGamePlayed;
	}

	public void setNumOfGamePlayed(int numOfGamePlayed) {
		this.numOfGamePlayed = numOfGamePlayed;
	}

	public int getNumOfGameWon() {
		return numOfGameWon;
	}

	public void setNumOfGameWon(int numOfGameWon) {
		this.numOfGameWon = numOfGameWon;
	}
	


}
============================================
src/NimHumanPlayer.java
20:24:04_Wednesday_23_May_2018
============================================

/**
 * 
 * @author Xinjie Lan, Student Id: 910030, Username:xinjiel2
 *@version 3.8
 *@description this is the third project for COMP90041
 * This  class stores all the data for Human player
 */
public class NimHumanPlayer extends NimPlayer{
	NimHumanPlayer(){
		super();
	}
	public NimHumanPlayer( String username, String givenName, String familyName,
			int numOfGamePlayed, int numOfGameWon, double winningRatio) {
		super();
		
		this.username = username;
		this.givenName = givenName;
		this.familyName = familyName;
		this.numOfGamePlayed = numOfGamePlayed;
		this.numOfGameWon = numOfGameWon;
		this.winningRatio = winningRatio;
	}
	@Override
		public int removeStone(){
			return 0;
			
		}
		public int removeStone(int enteredRemovalNum){
		
			int numberOfRemoval = enteredRemovalNum;
		
			return numberOfRemoval;
	}
		

}
============================================
src/Testable.java
20:24:06_Wednesday_23_May_2018
============================================

/*
Testable.java

This class is provided for auto-testing purpose. Do NOT change it. 

*/

public interface Testable {
public String advancedMove(boolean[] available, String lastMove);
}